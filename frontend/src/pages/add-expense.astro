---
import Layout from "../layouts/Layout.astro";
import FormField from "../components/FormField.astro";
import { vehiclesApi } from "../lib/api/vehicles";
import { expensesApi } from "../lib/api/expenses";
import { handleApiError } from "../lib/error-handling";
import type { ExpenseCategory } from "../types/expense";
import type { Vehicle, VehicleListResponse } from "../types/vehicle";

// Initialize variables
let vehicles: Vehicle[] = [];
let error: string | null = null;

try {
  const vehiclesData = await vehiclesApi.getVehicles();
  vehicles = vehiclesData.vehicles || [];
} catch (e) {
  console.error("Error fetching vehicles:", e);
  error = "Failed to load vehicles. Please try again later.";
}

// Define expense categories
const categories: ExpenseCategory[] = [
  "FUEL",
  "MAINTENANCE",
  "REPAIR",
  "INSURANCE",
  "TAX",
  "OTHER",
];
---

<Layout title="Add Expense">
  <main class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Add Expense</h1>
      <a
        href="/"
        class="bg-secondary text-secondary-foreground hover:bg-secondary/90 px-4 py-2 rounded-md"
      >
        Back to List
      </a>
    </div>
    {
      error ? (
        <div class="rounded-md bg-destructive/15 p-4 text-destructive mb-6">
          <p>{error}</p>
        </div>
      ) : (
        <form
          id="expense-form"
          class="max-w-2xl mx-auto space-y-6"
          data-vehicles={JSON.stringify(vehicles)}
          data-categories={JSON.stringify(categories)}
        >
          <FormField
            label="Date"
            name="date"
            type="date"
            required
            value={new Date().toISOString().split("T")[0]}
          />
          <FormField label="Vehicle" name="vehicleId" type="select" required>
            <option value="">Select a vehicle</option>
            {vehicles.map((vehicle) => (
              <option value={vehicle.id}>
                {vehicle.year} {vehicle.make} {vehicle.model} (
                {vehicle.licensePlate})
              </option>
            ))}
          </FormField>
          <FormField label="Category" name="category" type="select" required>
            <option value="">Select a category</option>
            {categories.map((category) => (
              <option value={category}>{category}</option>
            ))}
          </FormField>
          <FormField
            label="Amount"
            name="amount"
            type="number"
            required
            min="0"
            step="0.01"
            placeholder="0.00"
          />
          <FormField
            label="Note"
            name="note"
            type="textarea"
            placeholder="Add a note about this expense..."
          />
          <div class="flex justify-end">
            <button
              type="submit"
              class="bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md"
            >
              Add Expense
            </button>
          </div>
        </form>
      )
    }
  </main>
</Layout>

<script>
  import type { Vehicle } from "../types/vehicle";
  import type { ExpenseCategory } from "../types/expense";
  import { expensesApi } from "../lib/api/expenses";

  // Handle form submission
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById(
      "expense-form"
    ) as HTMLFormElement | null;
    if (!form) return;

    // Get data from form attributes
    const vehiclesData = JSON.parse(form.dataset.vehicles || "[]") as Vehicle[];
    const categoriesData = JSON.parse(
      form.dataset.categories || "[]"
    ) as ExpenseCategory[];

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const submitButton = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      if (!submitButton) return;

      try {
        submitButton.disabled = true;
        submitButton.textContent = "Adding...";

        const formData = new FormData(form);
        const data = {
          date: formData.get("date") as string,
          vehicleId: parseInt(formData.get("vehicleId") as string, 10),
          category: formData.get("category") as ExpenseCategory,
          amount: parseFloat(formData.get("amount") as string),
          note: formData.get("note") as string,
        };

        await expensesApi.createExpense(data);

        // Redirect to the expense list
        window.location.href = "/";
      } catch (error) {
        console.error("Error adding expense:", error);
        const errorMessage =
          error instanceof Error ? error.message : "An unknown error occurred";
        alert(errorMessage);
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = "Add Expense";
      }
    });
  });
</script>

---
import Layout from "../layouts/Layout.astro";
import { getVehicles } from "../lib/api/vehicles";
import type { Vehicle } from "../lib/api/vehicles";

// Initialize variables
let vehicles: Vehicle[] = [];
let error: string | null = null;
let isLoading = true;

// Fetch vehicles from API
try {
  vehicles = await getVehicles();
  isLoading = false;
} catch (e) {
  error = e instanceof Error ? e.message : "An unknown error occurred";
  isLoading = false;
}

const categories = ["Fuel", "Maintenance", "Insurance", "Other"];
---

<Layout title="Add Expense">
  <div class="space-y-6">
    <div class="flex items-center justify-between">
      <h1 class="text-3xl font-bold">Add Expense</h1>
      <a
        href="/expenses"
        class="inline-flex h-10 items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground"
      >
        Back to Expenses
      </a>
    </div>

    <div class="rounded-lg border p-6">
      {
        isLoading ? (
          <div class="py-12 text-center">
            <p class="text-muted-foreground">Loading form...</p>
          </div>
        ) : error ? (
          <div class="p-4">
            <div class="rounded-md bg-destructive/15 p-4 text-destructive">
              <p>{error}</p>
            </div>
          </div>
        ) : (
          <form id="expense-form" class="space-y-6">
            <div class="grid gap-4 md:grid-cols-2">
              <div class="space-y-2">
                <label for="date" class="text-sm font-medium">
                  Date
                </label>
                <input
                  type="date"
                  id="date"
                  name="date"
                  required
                  class="h-10 w-full rounded-md border border-input bg-background px-3 py-2"
                />
              </div>

              <div class="space-y-2">
                <label for="vehicle" class="text-sm font-medium">
                  Vehicle
                </label>
                <select
                  id="vehicle"
                  name="vehicleId"
                  required
                  class="h-10 w-full rounded-md border border-input bg-background px-3 py-2"
                >
                  <option value="">Select a vehicle</option>
                  {vehicles.map((vehicle) => (
                    <option value={vehicle.id}>
                      {vehicle.name} ({vehicle.make} {vehicle.model}{" "}
                      {vehicle.year})
                    </option>
                  ))}
                </select>
              </div>

              <div class="space-y-2">
                <label for="category" class="text-sm font-medium">
                  Category
                </label>
                <select
                  id="category"
                  name="category"
                  required
                  class="h-10 w-full rounded-md border border-input bg-background px-3 py-2"
                >
                  <option value="">Select a category</option>
                  {categories.map((category) => (
                    <option value={category.toLowerCase()}>{category}</option>
                  ))}
                </select>
              </div>

              <div class="space-y-2">
                <label for="amount" class="text-sm font-medium">
                  Amount
                </label>
                <div class="relative">
                  <span class="absolute left-3 top-2.5 text-muted-foreground">
                    $
                  </span>
                  <input
                    type="number"
                    id="amount"
                    name="amount"
                    step="0.01"
                    min="0"
                    required
                    class="h-10 w-full rounded-md border border-input bg-background pl-8 pr-3 py-2"
                  />
                </div>
              </div>
            </div>

            <div class="space-y-2">
              <label for="note" class="text-sm font-medium">
                Note
              </label>
              <textarea
                id="note"
                name="note"
                rows="3"
                class="w-full rounded-md border border-input bg-background px-3 py-2"
              />
            </div>

            <div class="flex justify-end">
              <button
                type="submit"
                class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground transition-colors hover:bg-primary/90"
              >
                Add Expense
              </button>
            </div>
          </form>
        )
      }
    </div>
  </div>
</Layout>

<script>
  import { createExpense } from "../lib/api/expenses";

  const form = document.getElementById("expense-form") as HTMLFormElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const date = formData.get("date") as string;
    const vehicleId = formData.get("vehicleId") as string;
    const category = formData.get("category") as string;
    const amount = parseFloat(formData.get("amount") as string);
    const note = formData.get("note") as string;

    try {
      await createExpense({
        date,
        vehicleId,
        category,
        amount,
        note,
      });

      // Redirect to expenses page
      window.location.href = "/expenses";
    } catch (error) {
      console.error("Failed to create expense:", error);
      alert("Failed to create expense. Please try again.");
    }
  });
</script>

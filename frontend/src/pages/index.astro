---
import Layout from "../layouts/Layout.astro";
import ExpenseTable from "../components/ExpenseTable.astro";
import Pagination from "../components/Pagination.astro";
import ExpenseFilters from "../components/ExpenseFilters.astro";
import { expensesApi } from "../lib/api/expenses";
import { vehiclesApi } from "../lib/api/vehicles";
import { handleApiError } from "../lib/error-handling";
import type {
  Expense,
  ExpenseCategory,
  ExpenseListResponse,
} from "../types/expense";
import type { Vehicle, VehicleListResponse } from "../types/vehicle";

// Get query parameters
const { searchParams } = Astro.url;
const page = parseInt(searchParams.get("page") || "1");
const category = (searchParams.get("category") || "") as ExpenseCategory;
const vehicleId = searchParams.get("vehicleId")
  ? parseInt(searchParams.get("vehicleId") as string, 10)
  : undefined;
const search = searchParams.get("search") || "";
const limit = 10;

// Initialize variables
let expensesResult: ExpenseListResponse = {
  expenses: [],
  total: 0,
  totalPages: 0,
};
let vehicles: Vehicle[] = [];
let error: string | null = null;

try {
  // Fetch data
  const [expensesData, vehiclesData] = await Promise.all([
    expensesApi.getExpenses({
      page,
      limit,
      category,
      vehicleId,
      search,
    }),
    vehiclesApi.getVehicles(),
  ]);

  expensesResult = expensesData;
  vehicles = vehiclesData.vehicles || [];

  // Log data for debugging
  console.log("Vehicles fetched:", vehicles);
  console.log("Expenses fetched:", expensesResult);
} catch (e) {
  console.error("Error fetching data:", e);
  error = e instanceof Error ? e.message : "An unknown error occurred";
}

// Define expense categories
const categories: ExpenseCategory[] = [
  "FUEL",
  "MAINTENANCE",
  "REPAIR",
  "INSURANCE",
  "TAX",
  "OTHER",
];
---

<Layout title="Expense Tracker">
  <main class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Expense Tracker</h1>
      <a
        href="/add-expense"
        class="bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md"
      >
        Add Expense
      </a>
    </div>
    {
      error ? (
        <div class="rounded-md bg-destructive/15 p-4 text-destructive mb-6">
          <p>{error}</p>
        </div>
      ) : (
        <div class="rounded-lg border">
          <ExpenseFilters
            categories={categories}
            vehicles={vehicles}
            initialSearch={search}
            initialCategory={category}
            initialVehicleId={vehicleId}
          />
          <ExpenseTable
            expenses={expensesResult.expenses}
            vehicles={vehicles}
          />
          <Pagination
            currentPage={page}
            totalPages={expensesResult.totalPages}
            totalItems={expensesResult.total}
            itemsPerPage={limit}
          />
        </div>
      )
    }
  </main>
</Layout>

<script>
  // Handle pagination and filters
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("filters") as HTMLFormElement | null;
    const searchInput = document.getElementById(
      "search"
    ) as HTMLInputElement | null;
    const categorySelect = document.getElementById(
      "category"
    ) as HTMLSelectElement | null;
    const vehicleSelect = document.getElementById(
      "vehicleId"
    ) as HTMLSelectElement | null;
    const prevButton = document.querySelector(
      ".pagination-prev"
    ) as HTMLButtonElement | null;
    const nextButton = document.querySelector(
      ".pagination-next"
    ) as HTMLButtonElement | null;

    // Handle form submission
    if (form) {
      form.addEventListener("submit", (e) => {
        e.preventDefault();
        const params = new URLSearchParams(window.location.search);

        if (searchInput && searchInput.value) {
          params.set("search", searchInput.value);
        } else {
          params.delete("search");
        }

        if (categorySelect && categorySelect.value) {
          params.set("category", categorySelect.value);
        } else {
          params.delete("category");
        }

        if (vehicleSelect && vehicleSelect.value) {
          params.set("vehicleId", vehicleSelect.value);
        } else {
          params.delete("vehicleId");
        }

        // Reset to page 1 when filters change
        params.set("page", "1");

        window.location.search = params.toString();
      });
    }

    // Handle pagination
    if (prevButton) {
      prevButton.addEventListener("click", () => {
        if (prevButton.disabled) return;
        const searchParams = new URLSearchParams(window.location.search);
        const currentPage = parseInt(searchParams.get("page") || "1");
        searchParams.set("page", (currentPage - 1).toString());
        window.location.search = searchParams.toString();
      });
    }

    if (nextButton) {
      nextButton.addEventListener("click", () => {
        if (nextButton.disabled) return;
        const searchParams = new URLSearchParams(window.location.search);
        const currentPage = parseInt(searchParams.get("page") || "1");
        searchParams.set("page", (currentPage + 1).toString());
        window.location.search = searchParams.toString();
      });
    }
  });
</script>

---
import Layout from "../layouts/Layout.astro";
import ExpenseTable from "../components/ExpenseTable.astro";
import ExpenseFilters from "../components/ExpenseFilters.astro";
import Pagination from "../components/Pagination.astro";
import LoadingSpinner from "../components/LoadingSpinner.astro";
import ErrorMessage from "../components/ErrorMessage.astro";
import { getExpenses } from "../lib/api/expenses";
import { getVehicles } from "../lib/api/vehicles";
import type { Expense } from "../lib/api/expenses";
import type { Vehicle } from "../lib/api/vehicles";

// Get query parameters
const { searchParams } = Astro.url;
const page = parseInt(searchParams.get("page") || "1");
const category = searchParams.get("category") || "";
const vehicleId = searchParams.get("vehicleId")
  ? parseInt(searchParams.get("vehicleId") as string, 10)
  : undefined;
const search = searchParams.get("search") || "";
const limit = 10;

// Initialize variables
let expenses: Expense[] = [];
let total = 0;
let totalPages = 1;
let error: string | null = null;
let isLoading = true;
let vehicles: Vehicle[] = [];

// Fetch data from API
try {
  // Fetch expenses
  const expensesResult = await getExpenses({
    page,
    limit,
    category: category || undefined,
    vehicleId: vehicleId,
    search: search || undefined,
  });

  expenses = expensesResult.expenses;
  total = expensesResult.total;
  totalPages = expensesResult.totalPages;

  // Fetch vehicles
  vehicles = await getVehicles();

  isLoading = false;
} catch (e) {
  error = e instanceof Error ? e.message : "An unknown error occurred";
  isLoading = false;
}

// Define expense categories
const categories = [
  "FUEL",
  "MAINTENANCE",
  "REPAIR",
  "INSURANCE",
  "TAX",
  "OTHER",
];
---

<Layout title="Expenses">
  <div class="space-y-6">
    <div class="flex items-center justify-between">
      <h1 class="text-3xl font-bold">Expenses</h1>
      <a
        href="/add-expense"
        class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground transition-colors hover:bg-primary/90"
      >
        Add Expense
      </a>
    </div>

    <div class="rounded-lg border">
      <ExpenseFilters
        categories={categories}
        vehicles={vehicles}
        initialSearch={search}
        initialCategory={category}
        initialVehicleId={vehicleId}
      />

      {
        isLoading ? (
          <div class="py-12">
            <LoadingSpinner size="lg" />
          </div>
        ) : error ? (
          <div class="p-4">
            <ErrorMessage message={error} retry={true} />
          </div>
        ) : expenses.length === 0 ? (
          <div class="p-8 text-center text-muted-foreground">
            <p>
              No expenses found. Try adjusting your filters or add a new
              expense.
            </p>
          </div>
        ) : (
          <>
            <ExpenseTable expenses={expenses} vehicles={vehicles} />
            <Pagination
              currentPage={page}
              totalPages={totalPages}
              totalItems={total}
              itemsPerPage={limit}
            />
          </>
        )
      }
    </div>
  </div>
</Layout>

<script>
  // Handle filter changes
  const searchInput = document.querySelector(
    'input[type="text"]'
  ) as HTMLInputElement;
  const categorySelect = document.querySelector(
    "select:first-of-type"
  ) as HTMLSelectElement;
  const vehicleSelect = document.querySelector(
    "select:last-of-type"
  ) as HTMLSelectElement;
  const prevButton = document.querySelector(
    "button:first-of-type"
  ) as HTMLButtonElement;
  const nextButton = document.querySelector(
    "button:last-of-type"
  ) as HTMLButtonElement;
  const retryButton = document.getElementById("retry-button");

  function updateFilters() {
    const searchParams = new URLSearchParams(window.location.search);

    if (searchInput.value) searchParams.set("search", searchInput.value);
    else searchParams.delete("search");

    if (categorySelect.value)
      searchParams.set("category", categorySelect.value);
    else searchParams.delete("category");

    if (vehicleSelect.value) searchParams.set("vehicleId", vehicleSelect.value);
    else searchParams.delete("vehicleId");

    window.location.search = searchParams.toString();
  }

  // Add event listeners
  searchInput.addEventListener("input", () => {
    const timeoutId = setTimeout(updateFilters, 500);
    searchInput.dataset.timeoutId = timeoutId.toString();
  });

  categorySelect.addEventListener("change", updateFilters);
  vehicleSelect.addEventListener("change", updateFilters);

  // Handle pagination
  prevButton.addEventListener("click", () => {
    if (prevButton.disabled) return;
    const searchParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(searchParams.get("page") || "1");
    searchParams.set("page", (currentPage - 1).toString());
    window.location.search = searchParams.toString();
  });

  nextButton.addEventListener("click", () => {
    if (nextButton.disabled) return;
    const searchParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(searchParams.get("page") || "1");
    searchParams.set("page", (currentPage + 1).toString());
    window.location.search = searchParams.toString();
  });

  // Handle retry button
  if (retryButton) {
    retryButton.addEventListener("click", () => {
      window.location.reload();
    });
  }
</script>

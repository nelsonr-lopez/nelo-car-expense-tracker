---
import Layout from "../layouts/Layout.astro";
import ExpenseTable from "../components/ExpenseTable.astro";
import ExpenseFilters from "../components/ExpenseFilters.astro";
import Pagination from "../components/Pagination.astro";
import ErrorMessage from "../components/ErrorMessage.astro";
import { expensesApi } from "../lib/api/expenses";
import { vehiclesApi } from "../lib/api/vehicles";
import { handleApiError } from "../lib/error-handling";
import type { Expense, ExpenseCategory } from "../types/expense";
import type { Vehicle } from "../types/vehicle";

// Get query parameters
const { searchParams } = Astro.url;
const page = parseInt(searchParams.get("page") || "1");
const category = (searchParams.get("category") || "") as ExpenseCategory;
const vehicleId = searchParams.get("vehicleId")
  ? parseInt(searchParams.get("vehicleId") as string, 10)
  : undefined;
const search = searchParams.get("search") || "";
const limit = 10;

// Initialize variables
let expenses: Expense[] = [];
let total = 0;
let totalPages = 1;
let vehicles: Vehicle[] = [];
let error: string | null = null;
let isLoading = true;

// Fetch data from API
try {
  // Fetch data
  const [expensesResult, vehiclesData] = await Promise.all([
    expensesApi.getExpenses({
      page,
      limit,
      category: category || undefined,
      vehicleId,
      search: search || undefined,
    }),
    vehiclesApi.getVehicles(),
  ]);

  expenses = expensesResult.expenses;
  total = expensesResult.total;
  totalPages = expensesResult.totalPages;
  vehicles = vehiclesData.vehicles || [];

  isLoading = false;
} catch (e) {
  const apiError = handleApiError(e);
  error = apiError.message;
  isLoading = false;
  console.error("Error fetching expenses data:", apiError);
}

// Define expense categories
const categories: ExpenseCategory[] = [
  "FUEL",
  "MAINTENANCE",
  "REPAIR",
  "INSURANCE",
  "TAX",
  "OTHER",
];
---

<Layout title="Expenses">
  <div class="space-y-6">
    <div class="flex items-center justify-between">
      <h1 class="text-3xl font-bold">Expenses</h1>
      <a
        href="/add-expense"
        class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground transition-colors hover:bg-primary/90"
      >
        Add Expense
      </a>
    </div>

    {
      isLoading ? (
        <div class="py-12 text-center">
          <p class="text-muted-foreground">Loading expenses...</p>
        </div>
      ) : error ? (
        <ErrorMessage message={error} retry={true} />
      ) : (
        <div class="rounded-lg border">
          <ExpenseFilters
            categories={categories}
            vehicles={vehicles || []}
            initialSearch={search}
            initialCategory={category}
            initialVehicleId={vehicleId}
          />
          {expenses.length === 0 ? (
            <div class="p-8 text-center text-muted-foreground">
              <p>
                No expenses found. Try adjusting your filters or add a new
                expense.
              </p>
            </div>
          ) : (
            <>
              <ExpenseTable expenses={expenses} vehicles={vehicles || []} />
              <Pagination
                currentPage={page}
                totalPages={totalPages}
                totalItems={total}
                itemsPerPage={limit}
              />
            </>
          )}
        </div>
      )
    }
  </div>
</Layout>

<script>
  // Handle filter changes
  const searchInput = document.querySelector(
    'input[type="text"]'
  ) as HTMLInputElement;
  const categorySelect = document.querySelector(
    "select:first-of-type"
  ) as HTMLSelectElement;
  const vehicleSelect = document.querySelector(
    "select:last-of-type"
  ) as HTMLSelectElement;
  const prevButton = document.querySelector(
    "button:first-of-type"
  ) as HTMLButtonElement;
  const nextButton = document.querySelector(
    "button:last-of-type"
  ) as HTMLButtonElement;
  const retryButton = document.getElementById("retry-button");

  function updateFilters() {
    const searchParams = new URLSearchParams(window.location.search);

    if (searchInput.value) searchParams.set("search", searchInput.value);
    else searchParams.delete("search");

    if (categorySelect.value)
      searchParams.set("category", categorySelect.value);
    else searchParams.delete("category");

    if (vehicleSelect.value) searchParams.set("vehicleId", vehicleSelect.value);
    else searchParams.delete("vehicleId");

    window.location.search = searchParams.toString();
  }

  // Add event listeners
  searchInput.addEventListener("input", () => {
    const timeoutId = setTimeout(updateFilters, 500);
    searchInput.dataset.timeoutId = timeoutId.toString();
  });

  categorySelect.addEventListener("change", updateFilters);
  vehicleSelect.addEventListener("change", updateFilters);

  // Handle pagination
  prevButton.addEventListener("click", () => {
    if (prevButton.disabled) return;
    const searchParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(searchParams.get("page") || "1");
    searchParams.set("page", (currentPage - 1).toString());
    window.location.search = searchParams.toString();
  });

  nextButton.addEventListener("click", () => {
    if (nextButton.disabled) return;
    const searchParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(searchParams.get("page") || "1");
    searchParams.set("page", (currentPage + 1).toString());
    window.location.search = searchParams.toString();
  });

  // Handle retry button
  if (retryButton) {
    retryButton.addEventListener("click", () => {
      window.location.reload();
    });
  }
</script>

---
import type { FormField as FormFieldType } from "../lib/config/expense-form";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";

interface Props {
  label: string;
  name: string;
  type: "text" | "number" | "date" | "select" | "textarea";
  required?: boolean;
  value?: string;
  min?: string;
  max?: string;
  step?: string;
  placeholder?: string;
}

const {
  label,
  name,
  type,
  required = false,
  value = "",
  min,
  max,
  step,
  placeholder,
} = Astro.props;

// Define valid input types
type InputType =
  | "text"
  | "date"
  | "email"
  | "password"
  | "tel"
  | "url"
  | "number";
---

<div class="space-y-2">
  <label for={name} class="block text-sm font-medium text-foreground">
    {label}
    {required && <span class="text-destructive">*</span>}
  </label>

  {
    type === "textarea" ? (
      <textarea
        id={name}
        name={name}
        class="block w-full rounded-md border border-input bg-background px-3 py-2 text-sm placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring"
        required={required}
        placeholder={placeholder}
      />
    ) : type === "select" ? (
      <select
        id={name}
        name={name}
        class="block w-full rounded-md border border-input bg-background px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-ring"
        required={required}
      >
        <slot />
      </select>
    ) : (
      <input
        type={type}
        id={name}
        name={name}
        value={value}
        min={min}
        max={max}
        step={step}
        placeholder={placeholder}
        required={required}
        class="block w-full rounded-md border border-input bg-background px-3 py-2 text-sm placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring"
      />
    )
  }
</div>

<script>
  // Initialize select elements
  document.addEventListener("DOMContentLoaded", () => {
    const selectWrappers = document.querySelectorAll(".select-wrapper");
    selectWrappers.forEach((wrapper) => {
      const select = wrapper.querySelector("select");
      if (select) {
        select.addEventListener("change", (e) => {
          const target = e.target as HTMLSelectElement;
          wrapper.setAttribute("data-value", target.value);
        });
      }
    });
  });
</script>

<style>
  .select-wrapper {
    position: relative;
  }
  .select-wrapper select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }
</style>
